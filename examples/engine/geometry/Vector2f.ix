using java.awt.Point;

class Vector2f impl Cloneable{
    pub var(getter, setter) x : float;
    pub var(getter, setter) y : float;

    this(x : float, y : float){
        this.x = x;
        this.y = y;
    }

    pub def add(vector : Vector2f){
        this.x += vector.getX();
        this.y +=  vector.getY();
    }
    pub def add(x : float, y : float){
        this.x += x;
        this.y += y;
    }
    pub def addX(x : float){
        this.x += x;
    }
    pub def addY(y : float){
        this.y += y;
    }
    pub def subtract(vector : Vector2f){
        this.x -= vector.getX();
        this.y -=  vector.getY();
    }
    pub def subtract(x : float, y : float){
        this.x -= x;
        this.y -= y;
    }
    pub def subtractX(x : float){
        this.x -= x;
    }
    pub def subtractY(y : float){
        this.y -= y;
    }

    pub def multiply(vector : Vector2f){
        this.x *= vector.getX();
        this.y *=  vector.getY();
    }
    pub def multiply(x : float, y : float){
        this.x *= x;
        this.y *= y;
    }
    pub def multiplyX(x : float){
        this.x *= x;
    }
    pub def multiplyY(y : float){
        this.y *= y;
    }

    pub def flipX(){
        this.x = -this.x;
    }
    pub def flipY(){
        this.y = -this.y;
    }

    pub def dotProduct(other : Vector2f) : float{
        return (this.getX()*other.getX())+(this.getY()*other.getY());
    }

    pub def getEdge(other : Vector2f) : Vector2f{
        return new Vector2f(this.getX()-other.getX(), this.getY()-other.getY());
    }
    pub def getPerpendicular() : Vector2f{
        return new Vector2f(-this.getY(), this.getX());
    }


    pub def angle(other : Vector2f) : float{
        return Math.acos(
                this.dotProduct(other)/
                (this.magnitude()*other.magnitude())
                ) to float;
    }

    pub def unitVector() : Vector2f{
        var magnitude : float = this.magnitude();
        return new Vector2f(x/magnitude, y/magnitude);
    }

    pub def distanceSq(other : Vector2f) : float {
        return (Math.pow(other.getX()-this.getX(),2)+Math.pow(other.getY()-this.getY(),2)) to float;
    }
    pub def distance(other : Vector2f) : float{
        return Math.sqrt(this.distanceSq(other)) to float;
    }
    pub def magnitudeSq() : float{
        return (Math.pow(this.getX(),2)+Math.pow(this.getY(),2)) to float;
    }
    pub def magnitude() : float{
        return Math.sqrt(this.magnitudeSq()) to float;
    }

    pub def getXi() : float {
        return Math.round(x);
    }

    pub def getYi() : float{
        return Math.round(y);
    }

    pub def set(x : float, y : float) {
        this.x = x;
        this.y = y;
    }

    override pub def toString() : String{
        return "("+this.getX()+", "+this.getY()+")";
    }

    pub def toString(decimalPlaces : int) : String{
        var x = Math.round(this.getX()*(10*decimalPlaces))/(10*decimalPlaces);
        var y = Math.round(this.getY()*(10*decimalPlaces))/(10*decimalPlaces);
        return "("+x+", "+y+")";
    }

    override pub def clone() : Vector2f{
        return new Vector2f(x, y);
    }

}